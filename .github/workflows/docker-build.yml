# name: Docker Build, Push, and Deploy

# on:
#   push:
#     branches:
#       - dev

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     environment: DOCKER
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Docker Compose
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y docker-compose

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image using Docker Compose
#         run: |
#           # Build the Docker images using docker-compose
#           docker-compose -f docker-compose.yml build

#           # Push the images to Docker Hub
#           docker-compose -f docker-compose.yml push

#           # Optionally, tag the image as 'latest' for easier reference
#           docker tag $DOCKER_USERNAME/nextjs-app:${{ github.sha }} $DOCKER_USERNAME/nextjs-app:latest
#           docker push $DOCKER_USERNAME/nextjs-app:latest
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     steps:
#       - name: Checkout Code (Deploy)
#         uses: actions/checkout@v3

#       - name: Set up SSH Password Authentication
#         run: |
#           echo "Setting up SSH password authentication..."
#           # Install sshpass tool to provide password for SSH login
#           sudo apt-get install -y sshpass

#       - name: SSH Command to Deploy
#         run: |
#           # Use sshpass to provide the password for SSH login
#           sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF
#             # Log in to Docker Hub on the remote server
#             docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

#             # Pull the latest Docker image from Docker Hub
#             docker pull $DOCKER_USERNAME/nextjs-app:latest

#             # Stop and remove the running container if it exists
#             docker stop nextjs-app || true
#             docker rm nextjs-app || true

#             # Run the container with the latest image
#             docker run -d --name nextjs-app -p 3000:3000 $DOCKER_USERNAME/nextjs-app:latest
#           EOF
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#           REMOTE_USER: ${{ secrets.REMOTE_USER }}
#           REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
#           SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
#           SSH_PORT: ${{ secrets.SSH_PORT }}

# for host need password instead of ssh key (cstad server)
# name: Docker Build, Push, and Deploy

# on:
#   push:
#     branches:
#       - lyhou

# env:
#   DOCKER_USERNAME: lyhou123
#   DOCKER_PASSWORD: Lyhou168@
#   IMAGE_NAME: inspectra-admin
#   IMAGE_TAG: latest
#   SSH_PASSWORD: 123
#   SSH_USER: cyber
#   SSH_HOST: 136.228.158.126
#   CONTAINER_NAME: inspectra-admin

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Docker Compose
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y docker-compose

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ env.DOCKER_USERNAME }}
#           password: ${{ env.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
#           docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     steps:
#       - name: Install SSHPass
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y sshpass

#       - name: SSH Command to Deploy
#         run: |
#           sshpass -p '${{ env.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no -p 22 '${{ env.SSH_USER }}'@'${{ env.SSH_HOST }}' << EOF
#             sudo docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
#             sudo docker stop ${{ env.CONTAINER_NAME }} || true
#             sudo docker rm ${{ env.CONTAINER_NAME }} || true
#             sudo docker rmi -f ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true
#             sudo docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#             sudo docker run -d --name ${{ env.CONTAINER_NAME }} -p 4016:3000 ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#           EOF
